import pandas as pd
from sklearn.preprocessing import MinMaxScaler

Code cell <bNSAgW63EyR0>
# %% [code]
from google.colab import drive
drive.mount('/content/drive')
Execution output from Aug 30, 2023 11:48 AM
0KB
	Stream
		Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).

Code cell <onnD3dH8E1GJ>
# %% [code]
# Load your Toyota data from a CSV file into a pandas DataFrame
df = pd.read_csv('/content/Toyota.csv1.csv')

Code cell <yld165JSE36N>
# %% [code]
# Calculate the mean for each column
column_means = df.mean()
Execution output from Aug 30, 2023 11:48 AM
0KB
	Stream
		<ipython-input-12-d85451972d0f>:2: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.
		  column_means = df.mean()

Code cell <B0v82HI2E6k2>
# %% [code]
# Fill missing values with the column mean
df.fillna(column_means, inplace=True)

Code cell <TP-5J-dBE-hp>
# %% [code]
# Save the updated DataFrame to a new CSV file
df.to_csv('filled_dataset.csv', index=False)

Code cell <aC_ogWATFBH4>
# %% [code]
df.info()
Execution output from Aug 30, 2023 11:48 AM
1KB
	Stream
		<class 'pandas.core.frame.DataFrame'>
		RangeIndex: 1436 entries, 0 to 1435
		Data columns (total 11 columns):
		 #   Column      Non-Null Count  Dtype  
		---  ------      --------------  -----  
		 0   Unnamed: 0  1436 non-null   int64  
		 1   Price       1436 non-null   int64  
		 2   Age         1436 non-null   float64
		 3   KM          1436 non-null   float64
		 4   FuelType    1336 non-null   object 
		 5   HP          1436 non-null   float64
		 6   MetColor    1436 non-null   float64
		 7   Automatic   1436 non-null   int64  
		 8   CC          1436 non-null   int64  
		 9   Doors       1436 non-null   int64  
		 10  Weight      1436 non-null   int64  
		dtypes: float64(4), int64(6), object(1)
		memory usage: 123.5+ KB

Code cell <T2pxvZkFFEcd>
# %% [code]
df
Execution output from Aug 30, 2023 11:48 AM
11KB
	text/plain
		Unnamed: 0  Price        Age            KM FuelType     HP  MetColor  \
		0              0  13500  23.000000  46986.000000   Diesel   90.0  1.000000   
		1              1  13750  23.000000  72937.000000   Diesel   90.0  1.000000   
		2              2  13950  24.000000  41711.000000   Diesel   90.0  0.674961   
		3              3  14950  26.000000  48000.000000   Diesel   90.0  0.000000   
		4              4  13750  30.000000  38500.000000   Diesel   90.0  0.000000   
		...          ...    ...        ...           ...      ...    ...       ...   
		1431        1431   7500  55.672156  20544.000000   Petrol   86.0  1.000000   
		1432        1432  10845  72.000000  68647.239972   Petrol   86.0  0.000000   
		1433        1433   8500  55.672156  17016.000000   Petrol   86.0  0.000000   
		1434        1434   7250  70.000000  68647.239972      NaN   86.0  1.000000   
		1435        1435   6950  76.000000      1.000000   Petrol  110.0  0.000000   
		
		      Automatic    CC  Doors  Weight  
		0             0  2000      3    1165  
		1             0  2000      3    1165  
		2             0  2000      3    1165  
		3             0  2000      3    1165  
		4             0  2000      3    1170  
		...         ...   ...    ...     ...  
		1431          0  1300      3    1025  
		1432          0  1300      3    1015  
		1433          0  1300      3    1015  
		1434          0  1300      3    1015  
		1435          0  1600      5    1114  
		
		[1436 rows x 11 columns]

Code cell <1ylL7mYaFHLS>
# %% [code]
# Assuming you want to normalize specific columns, e.g., 'Mileage' and 'Price'
columns_to_normalize = ['KM', 'Price']

Code cell <i0N_IARfFM1o>
# %% [code]
# Initialize the MinMaxScaler
scaler = MinMaxScaler()

Code cell <GPqHcBGoFPAa>
# %% [code]
# Fit and transform the selected columns
df[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])

Code cell <WZ27GvXzFRdw>
# %% [code]
# Save the normalized data back to a CSV file
df.to_csv('normalized_toyota.csv', index=False)

Code cell <2hg9U8DEFT_X>
# %% [code]
df
Execution output from Aug 30, 2023 11:49 AM
11KB
	text/plain
		Unnamed: 0     Price        Age        KM FuelType     HP  MetColor  \
		0              0  0.325044  23.000000  0.193355   Diesel   90.0  1.000000   
		1              1  0.333925  23.000000  0.300149   Diesel   90.0  1.000000   
		2              2  0.341030  24.000000  0.171647   Diesel   90.0  0.674961   
		3              3  0.376554  26.000000  0.197528   Diesel   90.0  0.000000   
		4              4  0.333925  30.000000  0.158433   Diesel   90.0  0.000000   
		...          ...       ...        ...       ...      ...    ...       ...   
		1431        1431  0.111901  55.672156  0.084539   Petrol   86.0  1.000000   
		1432        1432  0.230728  72.000000  0.282496   Petrol   86.0  0.000000   
		1433        1433  0.147425  55.672156  0.070021   Petrol   86.0  0.000000   
		1434        1434  0.103020  70.000000  0.282496      NaN   86.0  1.000000   
		1435        1435  0.092362  76.000000  0.000000   Petrol  110.0  0.000000   
		
		      Automatic    CC  Doors  Weight  
		0             0  2000      3    1165  
		1             0  2000      3    1165  
		2             0  2000      3    1165  
		3             0  2000      3    1165  
		4             0  2000      3    1170  
		...         ...   ...    ...     ...  
		1431          0  1300      3    1025  
		1432          0  1300      3    1015  
		1433          0  1300      3    1015  
		1434          0  1300      3    1015  
		1435          0  1600      5    1114  
		
		[1436 rows x 11 columns]

Code cell <HwSYhTJEFW04>
# %% [code]
from sklearn.preprocessing import StandardScaler

Code cell <WPH7bh3TFanh>
# %% [code]
# Specify the columns to be normalized
columns_to_normalize2 = ['Age']  # Replace with your column names

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the selected columns
df[columns_to_normalize2] = scaler.fit_transform(df[columns_to_normalize2])

Code cell <HlkNnqtXFdtv>
# %% [code]
df.to_csv('scaled_dataset.csv', index=False)

Code cell <Y5jJOnYZFgJd>
# %% [code]
df
Execution output from Aug 30, 2023 11:49 AM
11KB
	text/plain
		Unnamed: 0     Price       Age        KM FuelType     HP  MetColor  \
		0              0  0.325044 -1.822802  0.193355   Diesel   90.0  1.000000   
		1              1  0.333925 -1.822802  0.300149   Diesel   90.0  1.000000   
		2              2  0.341030 -1.767012  0.171647   Diesel   90.0  0.674961   
		3              3  0.376554 -1.655430  0.197528   Diesel   90.0  0.000000   
		4              4  0.333925 -1.432267  0.158433   Diesel   90.0  0.000000   
		...          ...       ...       ...       ...      ...    ...       ...   
		1431        1431  0.111901  0.000000  0.084539   Petrol   86.0  1.000000   
		1432        1432  0.230728  0.910942  0.282496   Petrol   86.0  0.000000   
		1433        1433  0.147425  0.000000  0.070021   Petrol   86.0  0.000000   
		1434        1434  0.103020  0.799360  0.282496      NaN   86.0  1.000000   
		1435        1435  0.092362  1.134105  0.000000   Petrol  110.0  0.000000   
		
		      Automatic    CC  Doors  Weight  
		0             0  2000      3    1165  
		1             0  2000      3    1165  
		2             0  2000      3    1165  
		3             0  2000      3    1165  
		4             0  2000      3    1170  
		...         ...   ...    ...     ...  
		1431          0  1300      3    1025  
		1432          0  1300      3    1015  
		1433          0  1300      3    1015  
		1434          0  1300      3    1015  
		1435          0  1600      5    1114  
		
		[1436 rows x 11 columns]

Code cell <GA_ldXA_Fix7>
# %% [code]
# Specify the columns to be normalized
columns_to_normalize3 = ['CC','Weight']

Code cell <yg9cjYXdFmEx>
# %% [code]
# Find the maximum absolute value in the selected columns
max_abs = df[columns_to_normalize3].abs().max().max()

Code cell <x6MgdZ3JFoP9>
# %% [code]
# Apply Decimal Scaling Normalization
df[columns_to_normalize3] = df[columns_to_normalize3] / (10 ** len(str(int(max_abs))))

Code cell <0gIoQXj5Fqfi>
# %% [code]
# Save the updated DataFrame to a new CSV file
df.to_csv('scaled_dataset.csv', index=False)

Code cell <hHJveKTJFtP_>
# %% [code]
df
Execution output from Aug 30, 2023 11:49 AM
11KB
	text/plain
		Unnamed: 0     Price       Age        KM FuelType     HP  MetColor  \
		0              0  0.325044 -1.822802  0.193355   Diesel   90.0  1.000000   
		1              1  0.333925 -1.822802  0.300149   Diesel   90.0  1.000000   
		2              2  0.341030 -1.767012  0.171647   Diesel   90.0  0.674961   
		3              3  0.376554 -1.655430  0.197528   Diesel   90.0  0.000000   
		4              4  0.333925 -1.432267  0.158433   Diesel   90.0  0.000000   
		...          ...       ...       ...       ...      ...    ...       ...   
		1431        1431  0.111901  0.000000  0.084539   Petrol   86.0  1.000000   
		1432        1432  0.230728  0.910942  0.282496   Petrol   86.0  0.000000   
		1433        1433  0.147425  0.000000  0.070021   Petrol   86.0  0.000000   
		1434        1434  0.103020  0.799360  0.282496      NaN   86.0  1.000000   
		1435        1435  0.092362  1.134105  0.000000   Petrol  110.0  0.000000   
		
		      Automatic    CC  Doors  Weight  
		0             0  0.20      3  0.1165  
		1             0  0.20      3  0.1165  
		2             0  0.20      3  0.1165  
		3             0  0.20      3  0.1165  
		4             0  0.20      3  0.1170  
		...         ...   ...    ...     ...  
		1431          0  0.13      3  0.1025  
		1432          0  0.13      3  0.1015  
		1433          0  0.13      3  0.1015  
		1434          0  0.13      3  0.1015  
		1435          0  0.16      5  0.1114  
		
		[1436 rows x 11 columns]
